classdef MaxMinScheduler < network_elements.lteScheduler
% Scheduler that tries to maximize the minimum user throughput
% Stefan Schwarz 
% (c) 2010 by INTHFT
% www.nt.tuwien.ac.at

   properties
       SINR_averager
       CQI_mapping_data
       linprog_options
       alphabets
   end

   methods
       function obj = MaxMinScheduler(RB_grid_size,Ns_RB,UEs_to_be_scheduled,scheduler_params,CQI_params,averager,mapping_data,alphabets)
           % Fill in basic parameters (handled by the superclass constructor)
            % Fill in basic parameters (handled by the superclass constructor)
           obj = obj@network_elements.lteScheduler(RB_grid_size,Ns_RB,UEs_to_be_scheduled,scheduler_params,CQI_params);
           
           % 0 CQI is not assigned (it means that conditions are out of
           % range to transmit, so no data will be assigned to 0-CQI RBs)
           %obj.assign_zero_CQI = scheduler_params.assign_zero_CQI;
           
           obj.static_scheduler = false;
           obj.SINR_averager = averager;
           % Get a vector of scheduling params (one for each UE)
           % initialized to the values that we want
           obj.UE_static_params = obj.get_initialized_UE_params(scheduler_params,CQI_params);
           obj.CQI_mapping_data = mapping_data;
           obj.linprog_options = optimset('LargeScale','off','Simplex','on','Display','off');
           obj.alphabets = alphabets;
       end

       function UE_scheduling = scheduler_users(obj,subframe_corr,total_no_refsym,SyncUsedElements,UE_output,UE_specific_data,cell_genie,PBCHsyms)
           UE_scheduling = obj.UE_static_params;
           N_UE = size(UE_output,2);
           N_RB = size(UE_output(1).CQI,1)*2;
 
           %% set pmi and ri values
           [UE_scheduling,c,user_ind] = obj.set_pmi_ri(UE_scheduling,N_UE,N_RB,UE_output); 

%            for uu = 1:N_UE
%                UE_scheduling(uu).CQI_params = [];
%                if ~isempty(UE_output(uu).PMI)   % check wheter PMI is fed back
%                    if ~isempty(UE_output(uu).RI)    % check wheter RI is fed back
%                         UE_scheduling(uu).nLayers = UE_output(uu).RI;
%                         UE_scheduling(uu).nCodewords = min(2,UE_output(uu).RI);
%                    end
%                UE_scheduling(uu).PMI = UE_output(uu).PMI;
%                end
%                temp_UE(uu).CQI = UE_output(uu).CQI;
%                temp_UE(uu).CQI(temp_UE(uu).CQI==20) = 0;
%                CQI_bar = max(temp_UE(uu).CQI(:));
%                if CQI_bar == 20
%                    CQI_bar = 0;
%                end
%                CQI_bar = CQI_bar +1;
%                a(uu) = obj.SINR_averager.MI_data(1).k(CQI_bar);
%                b(uu) = obj.SINR_averager.MI_data(1).d(CQI_bar);
%            end
%            
%            for u_=1:N_UE % calculate sum efficiencies for both codewords on every RB
%                UE_scheduling(u_).UE_mapping = false(obj.RB_grid_size,2);
%            end % based on this value the decision is carried out which UE gets an RB
           
           C = zeros(N_UE,N_RB*N_UE);
           for rb = 1:N_RB
               for uu = 1:N_UE
%                     c = [c;a(uu)* temp_UE(uu).CQI(rb)+b(uu)];
                    C(uu,N_UE*(rb-1)+uu) = c(uu,rb);
               end
           end
           
           %% Max. min. scheduler
           A = kron(eye(N_RB),ones(1,N_UE));
           A = [A,zeros(size(A,1),1)];
           constraints = [-C,-ones(size(C,1),1)];
           constraints = [constraints;A];
           size([N_UE*N_RB;1]
           RBs = round(linprog([N_UE*N_RB;1],constraints,[zeros(N_UE,1);ones(N_RB,1)],[],[],[zeros(N_RB*N_UE,1);-Inf],[ones(N_RB*N_UE,1);Inf],[],obj.linprog_options));
           %% set cqi values
           UE_scheduling = obj.set_cqi(UE_scheduling,user_ind,RBs(1:end-1),N_UE,N_RB,UE_output);
           obj.calculate_allocated_bits(UE_scheduling,subframe_corr,total_no_refsym,SyncUsedElements,PBCHsyms); 
       end
   end
end 
